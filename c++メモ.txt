#include<bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define rep2(i, s, n) for (int i = (s); i < (int)(n); i++)

------------------------------------------------------
intより範囲が大きい型
int64_t = 0LL; //LLをつけないとダメ


型変換(数値系の型で有効)
double x = (double)a;


int→string
string s = to_string(number);

string→int
int n = stoi(s);

double: stod();
int64_t: stoll();


参照渡し関数
(引数はアドレスじゃなくて「変数」で良い!!!、関数の中も *x とかつけずに普通の変数を引数に受け取った時みたいに書いてよい!!!)
https://atcoder.jp/contests/apg4b/tasks/APG4b_u

int f(int &x) 


範囲for文
vector<int> vec = {1, 3, 2, 5};
for (int i : vec) {
  cout << i << " "; //1 3 2 5が出力
}


pair,tupleについて(特にEX02が参考に)
https://atcoder.jp/contests/APG4b
------------------------------------------------------
--数列編--
AOJでは
vector<vector<int>>でなくvector<vector<int> >でないとダメ


初期値の指定
vector<型> 配列名(要素数, 初期値);

3*4配列で0で初期化
vector<vector<int>> data(3, vector<int>(4,0));

3*4*5で0で初期化配列
vector<vector<vector<int>>> data(3, vector<vector<int>>(4, vector<int>(5,0)) );

data.size();  // 3 (縦の要素数) (12ではないことに注意!)
data.at(0).size();  // 4 (横の要素数)

---------------------------------------------------
https://atcoder.jp/contests/apg4b/tasks/APG4b_n

要素の追加
vec.push_back(10); // 末尾に10を追加

要素の削除
vec.pop_back(); // 末尾の要素を削除
------------------------------------------------------
--文字列編--
stringもs[0]でなくs.at(0)でアクセスできるのが賢明


文字列のEOSは'\0'
実例は 1_8_C_2 参照


A:65 Z:90
a:97 z:122
差:32
------------------------------------------------------
--入力編--
行単位の受け取り
https://atcoder.jp/contests/apg4b/tasks/APG4b_m

getline(cin, 文字列変数);
 

入力が出来なくなるまでの繰り返し
while(cin >> c)
実例は 1_8_C 参照 
------------------------------------------------------
--出力編--
cout での桁指定
https://marycore.jp/prog/cpp/stream-format-float/

小数点以下の桁数固定(APG4b 3.01章)
cout << fixed << setprecision(桁数);

------------------------------------------------------
文字の扱い
https://judge.u-aizu.ac.jp/onlinejudge/commentary.jsp?id=ITP1_8_A
int isalpha(char ch): ch がアルファベットなら true を返す
int isdigit(char ch): ch が数字なら true を返す
int islower(char ch): ch が小文字なら true を返す
int isupper(char ch): ch が大文字なら true を返す
int tolower(char ch): ch の小文字を返す
int toupper(char ch): ch の大文字を返す


stringについての関数
https://judge.u-aizu.ac.jp/onlinejudge/commentary.jsp?id=ITP1_8_D&pattern=pre&type=language&filter=C%2B%2B

s2がpを含むならYes,そうでないならNoを返す
string::nposは-1でもよい
    if (s2.find(p) == string::npos ) cout << "No" << endl;
    else cout << "Yes" << endl;

同じかどうかは==でよい

部分文字列
https://judge.u-aizu.ac.jp/onlinejudge/commentary.jsp?id=ITP1_9_B&pattern=pre&type=language&filter=C%2B%2B

string numbers = "0123456789";
cout << numbers.substr(3, 5) << endl; // 34567 が出力される

辞書順比較(<や>=が使える)
https://judge.u-aizu.ac.jp/onlinejudge/commentary.jsp?id=ITP1_9_C&pattern=pre&type=language&filter=C%2B%2B

#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define rep2(i, s, n) for (int i = (s); i < (int)(n); i++)

文字列置換
https://judge.u-aizu.ac.jp/onlinejudge/commentary.jsp?id=ITP1_9_D&pattern=pre&type=language&filter=C%2B%2B

  string str = "0123456789";

  cout << str.replace(3, 4, "ABCD") << endl; // 012ABCD789 

i文字目のイデレーター(1_9_D参照)
str.begin() + i

sumで一気に取得するとnunにあるので一つ一つ加算(1_10_D,L3距離参照)


c メモ
静的なローカル変数のイメージ
・スコープが限られたグローバル変数で初期化は1回のみ